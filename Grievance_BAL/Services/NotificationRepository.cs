using System.Net;
using System.Net.Mail;
using Grievance_BAL.IServices;
using Grievance_Model.DTOs.AppResponse;
using Grievance_Model.DTOs.Notification;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;

namespace Grievance_BAL.Services
{
    public class NotificationRepository : INotificationRepository
    {
        private readonly MailSettingsModel _mailSettings;
        private readonly IConfiguration _config;
        public NotificationRepository(IOptions<MailSettingsModel> mailSettings, IConfiguration configuration)
        {
            _mailSettings = mailSettings.Value;
            _config = configuration;
        }

        public async Task<ResponseModel> SendNotification(MailRequestModel mailRequest)
        {
            ResponseModel responeModel = new ResponseModel();
            try
            {
                if (mailRequest != null && mailRequest.EmailToId != null && mailRequest.EmailToId.Count != 0)
                {
                    string sentEmail = string.Empty;

                    MailMessage message = new MailMessage();
                    string smtpServer = _mailSettings.Server;
                    int port = _mailSettings.Port;
                    string senderEmail = _mailSettings.SenderEmail;
                    string password = _mailSettings.Password;
                    SmtpClient client = new SmtpClient(smtpServer, port);
                    client.EnableSsl = true;

                    client.Credentials = new NetworkCredential(senderEmail, password);

                    message.Body = mailRequest.EmailBody.ToString();
                    message.IsBodyHtml = true;

                    message.Subject = mailRequest.EmailSubject;


                    var deploymentMode = _config["DeploymentModes"]?.ToString()?.ToLower().Trim();
                    if (deploymentMode == "cetpa")
                    {
                        message.To.Add("ctpdev@yopmail.com");
                        sentEmail += "ctpdev@yopmail.com" + ";";

                        try
                        {
                            SmtpClient clientCetpa = new SmtpClient("smtp.gmail.com", 587);
                            clientCetpa.EnableSsl = true;
                            clientCetpa.Credentials = new NetworkCredential("autogenerated@cetpainfotech.com", "xdeqexalyfjhkgmz");
                            message.From = new MailAddress(senderEmail);
                            clientCetpa.Send(message);
                            clientCetpa.Dispose();
                            Console.WriteLine("Email sent successfully.");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(ex.ToString());
                        }
                    }
                    else
                    {
                        #region Add To Users
                        foreach (var item in mailRequest.EmailToId)
                        {
                            message.To.Add(item);
                            sentEmail += item + ";";
                        }
                        #endregion
                        #region Add CC Users
                        if (mailRequest.EmailCCId != null && mailRequest.EmailCCId.Count != 0)
                        {
                            foreach (var item in mailRequest.EmailCCId)
                            {
                                message.CC.Add(item);
                                sentEmail += ";" + item;
                            }
                        }
                        #endregion
                        #region Add Attachment to mail
                        if (mailRequest.Attachments != null)
                        {
                            foreach (var file in mailRequest.Attachments)
                            {
                                if (file != null && file.Length > 0)
                                {
                                    var memoryStream = new MemoryStream();
                                    file.CopyTo(memoryStream);

                                    var attachment = new Attachment(new MemoryStream(memoryStream.ToArray()), file.FileName);
                                    message.Attachments.Add(attachment);
                                }
                            }
                        }
                        #endregion
                        #region DFCCIL SMTP
                        try
                        {
                            message.From = new MailAddress(senderEmail);
                            client.Send(message);
                            client.Dispose();
                            Console.WriteLine("Email sent successfully.");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Failed to send email: {ex.Message}");
                        }

                        #endregion
                    }

                    responeModel.StatusCode = System.Net.HttpStatusCode.OK;
                    responeModel.Message = "Email <" + sentEmail + "> notification send successfully.";
                }
                else
                {
                    responeModel.Message = "Email address is required.";
                    responeModel.StatusCode = System.Net.HttpStatusCode.BadRequest;
                    responeModel.Error = true;
                    responeModel.ErrorDetail = responeModel.Message;

                }
            }
            catch (Exception ex)
            {
                string innerException = ex.InnerException != null ? ex.InnerException.ToString() : "NA";
                responeModel.ErrorDetail = "Message " + ex.Message + "\t InnerException:\t " + innerException;
                responeModel.Message = ex.Message;
                responeModel.Error = true;
                responeModel.StatusCode = System.Net.HttpStatusCode.BadRequest;
            }
            return responeModel;
        }


    }
}
